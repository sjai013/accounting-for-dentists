@using AccountingForDentists.Components.Shared
@using AccountingForDentists.Models
<UndismissableModal Title="Confirm Delete" @ref="modal">

    <Body>
        Delete Contract Entry?
        <div class="fs-5">@pendingDelete?.BusinessName @@
            @pendingDelete?.InvoiceDateReference.Date.ToString("dd/MM/yyyy")</div>
        <div class="d-flex gap-2 fs-5">
            <div class="text-success"> Sales: $@pendingDelete?.SalesEntity?.Amount.ToString("#,##0.00")</div>
            <div class="text-danger"> Expenses: $@pendingDelete?.ExpensesEntity?.Amount.ToString("#,##0.00")</div>
        </div>



    </Body>
    <Footer>
        <button type="button" class="btn btn-outline-danger" disabled=@deleteInProgress
            @onclick="async () => await Delete()">
            @if (deleteInProgress)
            {
                <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                <span role="status">Deleting...</span>
            }
            else
            {
                <span>Delete</span>
            }
        </button>
        <button type="button" class="btn btn-outline-secondary" disabled=@deleteInProgress
            @onclick="() => modal.Close()">No</button>
    </Footer>
</UndismissableModal>

@code {
    UndismissableModal modal { get; set; } = null!;
    ContractIncomeEntity? pendingDelete { get; set; }
    bool deleteInProgress { get; set; }

    [Parameter]
    public EventCallback<ContractIncomeEntity> OnDeleteEntity { get; set; }

    public async Task ShowModal(ContractIncomeEntity? entity)
    {
        if (entity is null) return;
        deleteInProgress = false;
        pendingDelete = entity;
        await modal.Show();
        this.StateHasChanged();
    }

    public async Task Delete()
    {
        var minWaitTime = Task.Delay(250);
        this.deleteInProgress = true;
        try
        {
            await OnDeleteEntity.InvokeAsync(pendingDelete);
        }
        finally
        {
            await minWaitTime;
            await modal.Close();
        }
    }

}