@typeparam TElement
<select class="@_class ps-2" @onchange="OnSelectChange">
    @for (var i = 0; i < Items.Count; i++)
    {
        Option element = Items[i];
        <option selected="@(element.Value?.Equals(Selected))" value=@i>@(element.Label)</option>
    }
</select>

@code {
    [Parameter]
    public List<Option> Items { get; set; } = [];

    [Parameter]
    public required Func<TElement?, string> TextDelegate { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> Attributes { get; set; } = [];

    [Parameter]
    public TElement? Selected { get; set; }

    [Parameter]
    public EventCallback<TElement?> SelectedChanged { get; set; }

    private string _class { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        if (Attributes?.TryGetValue("class", out object? classObject) == true)
        {
            _class = classObject?.ToString() ?? "";
        }
    }
    private async Task OnSelectChange(ChangeEventArgs args)
    {
        if (!int.TryParse((string?)args.Value, out var index)) return;
        if (index < 0 || index > Items.Count - 1) return;
        Option element = Items[index];

        if (element.Value is null)
        {
            Selected = default;
        }
        else
        {
            Selected = element.Value;
        }
        await SelectedChanged.InvokeAsync(Selected);
    }

    public record Option
    {
        public string Label { get; set; } = string.Empty;
        public TElement? Value { get; set; }
    }
}
