// <auto-generated />
using System;
using AccountingForDentists.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccountingForDentists.Migrations
{
    [DbContext(typeof(AccountingContext))]
    [Migration("20250718102213_AttachmentFileName")]
    partial class AttachmentFileName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccountingForDentists.Models.AttachmentEntity", b =>
                {
                    b.Property<Guid>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AttachmentId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("AccountingForDentists.Models.BusinessEntity", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TenantId", "UserId", "Name");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("AccountingForDentists.Models.ContractIncomeEntity", b =>
                {
                    b.Property<Guid>("ContractualAgreementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ExpensesEntityExpensesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceDateReferenceDateContainerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SalesEntitySalesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContractualAgreementId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("ExpensesEntityExpensesId");

                    b.HasIndex("InvoiceDateReferenceDateContainerId");

                    b.HasIndex("SalesEntitySalesId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("ContractIncome");
                });

            modelBuilder.Entity("AccountingForDentists.Models.DateContainerEntity", b =>
                {
                    b.Property<Guid>("DateContainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DateContainerId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("DateReferences");
                });

            modelBuilder.Entity("AccountingForDentists.Models.ExpensesEntity", b =>
                {
                    b.Property<Guid>("ExpensesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<Guid?>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DateReferenceDateContainerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("GST")
                        .HasColumnType("decimal(9,2)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExpensesId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("DateReferenceDateContainerId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("AccountingForDentists.Models.SalesEntity", b =>
                {
                    b.Property<Guid>("SalesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<Guid?>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DateReferenceDateContainerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("GST")
                        .HasColumnType("decimal(9,2)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SalesId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("DateReferenceDateContainerId");

                    b.HasIndex("UserId", "TenantId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("AccountingForDentists.Models.ContractIncomeEntity", b =>
                {
                    b.HasOne("AccountingForDentists.Models.AttachmentEntity", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId");

                    b.HasOne("AccountingForDentists.Models.ExpensesEntity", "ExpensesEntity")
                        .WithMany()
                        .HasForeignKey("ExpensesEntityExpensesId");

                    b.HasOne("AccountingForDentists.Models.DateContainerEntity", "InvoiceDateReference")
                        .WithMany()
                        .HasForeignKey("InvoiceDateReferenceDateContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountingForDentists.Models.SalesEntity", "SalesEntity")
                        .WithMany()
                        .HasForeignKey("SalesEntitySalesId");

                    b.Navigation("Attachment");

                    b.Navigation("ExpensesEntity");

                    b.Navigation("InvoiceDateReference");

                    b.Navigation("SalesEntity");
                });

            modelBuilder.Entity("AccountingForDentists.Models.ExpensesEntity", b =>
                {
                    b.HasOne("AccountingForDentists.Models.AttachmentEntity", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId");

                    b.HasOne("AccountingForDentists.Models.DateContainerEntity", "DateReference")
                        .WithMany()
                        .HasForeignKey("DateReferenceDateContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("DateReference");
                });

            modelBuilder.Entity("AccountingForDentists.Models.SalesEntity", b =>
                {
                    b.HasOne("AccountingForDentists.Models.AttachmentEntity", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId");

                    b.HasOne("AccountingForDentists.Models.DateContainerEntity", "DateReference")
                        .WithMany()
                        .HasForeignKey("DateReferenceDateContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("DateReference");
                });
#pragma warning restore 612, 618
        }
    }
}
